/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.opensource.svga.FrameEntity', null, global);
goog.exportSymbol('proto.com.opensource.svga.Layout', null, global);
goog.exportSymbol('proto.com.opensource.svga.MovieEntity', null, global);
goog.exportSymbol('proto.com.opensource.svga.MovieParams', null, global);
goog.exportSymbol('proto.com.opensource.svga.ShapeEntity', null, global);
goog.exportSymbol('proto.com.opensource.svga.ShapeEntity.EllipseArgs', null, global);
goog.exportSymbol('proto.com.opensource.svga.ShapeEntity.RectArgs', null, global);
goog.exportSymbol('proto.com.opensource.svga.ShapeEntity.ShapeArgs', null, global);
goog.exportSymbol('proto.com.opensource.svga.ShapeEntity.ShapeStyle', null, global);
goog.exportSymbol('proto.com.opensource.svga.ShapeEntity.ShapeStyle.LineCap', null, global);
goog.exportSymbol('proto.com.opensource.svga.ShapeEntity.ShapeStyle.LineJoin', null, global);
goog.exportSymbol('proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor', null, global);
goog.exportSymbol('proto.com.opensource.svga.ShapeEntity.ShapeType', null, global);
goog.exportSymbol('proto.com.opensource.svga.SpriteEntity', null, global);
goog.exportSymbol('proto.com.opensource.svga.Transform', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.opensource.svga.MovieParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.opensource.svga.MovieParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.opensource.svga.MovieParams.displayName = 'proto.com.opensource.svga.MovieParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.opensource.svga.MovieParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.opensource.svga.MovieParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.opensource.svga.MovieParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.MovieParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewboxwidth: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    viewboxheight: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    fps: jspb.Message.getFieldWithDefault(msg, 3, 0),
    frames: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.opensource.svga.MovieParams}
 */
proto.com.opensource.svga.MovieParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.opensource.svga.MovieParams;
  return proto.com.opensource.svga.MovieParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.opensource.svga.MovieParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.opensource.svga.MovieParams}
 */
proto.com.opensource.svga.MovieParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setViewboxwidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setViewboxheight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFps(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.opensource.svga.MovieParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.opensource.svga.MovieParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.opensource.svga.MovieParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.MovieParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getViewboxwidth();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getViewboxheight();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getFps();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFrames();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional float viewBoxWidth = 1;
 * @return {number}
 */
proto.com.opensource.svga.MovieParams.prototype.getViewboxwidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.MovieParams.prototype.setViewboxwidth = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float viewBoxHeight = 2;
 * @return {number}
 */
proto.com.opensource.svga.MovieParams.prototype.getViewboxheight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.MovieParams.prototype.setViewboxheight = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 fps = 3;
 * @return {number}
 */
proto.com.opensource.svga.MovieParams.prototype.getFps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.opensource.svga.MovieParams.prototype.setFps = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 frames = 4;
 * @return {number}
 */
proto.com.opensource.svga.MovieParams.prototype.getFrames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.opensource.svga.MovieParams.prototype.setFrames = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.opensource.svga.SpriteEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.opensource.svga.SpriteEntity.repeatedFields_, null);
};
goog.inherits(proto.com.opensource.svga.SpriteEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.opensource.svga.SpriteEntity.displayName = 'proto.com.opensource.svga.SpriteEntity';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.opensource.svga.SpriteEntity.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.opensource.svga.SpriteEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.com.opensource.svga.SpriteEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.opensource.svga.SpriteEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.SpriteEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    imagekey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    framesList: jspb.Message.toObjectList(msg.getFramesList(),
    proto.com.opensource.svga.FrameEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.opensource.svga.SpriteEntity}
 */
proto.com.opensource.svga.SpriteEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.opensource.svga.SpriteEntity;
  return proto.com.opensource.svga.SpriteEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.opensource.svga.SpriteEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.opensource.svga.SpriteEntity}
 */
proto.com.opensource.svga.SpriteEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImagekey(value);
      break;
    case 2:
      var value = new proto.com.opensource.svga.FrameEntity;
      reader.readMessage(value,proto.com.opensource.svga.FrameEntity.deserializeBinaryFromReader);
      msg.addFrames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.opensource.svga.SpriteEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.opensource.svga.SpriteEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.opensource.svga.SpriteEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.SpriteEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImagekey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFramesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.com.opensource.svga.FrameEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional string imageKey = 1;
 * @return {string}
 */
proto.com.opensource.svga.SpriteEntity.prototype.getImagekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.opensource.svga.SpriteEntity.prototype.setImagekey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated FrameEntity frames = 2;
 * @return {!Array.<!proto.com.opensource.svga.FrameEntity>}
 */
proto.com.opensource.svga.SpriteEntity.prototype.getFramesList = function() {
  return /** @type{!Array.<!proto.com.opensource.svga.FrameEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.opensource.svga.FrameEntity, 2));
};


/** @param {!Array.<!proto.com.opensource.svga.FrameEntity>} value */
proto.com.opensource.svga.SpriteEntity.prototype.setFramesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.com.opensource.svga.FrameEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.opensource.svga.FrameEntity}
 */
proto.com.opensource.svga.SpriteEntity.prototype.addFrames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.com.opensource.svga.FrameEntity, opt_index);
};


proto.com.opensource.svga.SpriteEntity.prototype.clearFramesList = function() {
  this.setFramesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.opensource.svga.Layout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.opensource.svga.Layout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.opensource.svga.Layout.displayName = 'proto.com.opensource.svga.Layout';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.opensource.svga.Layout.prototype.toObject = function(opt_includeInstance) {
  return proto.com.opensource.svga.Layout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.opensource.svga.Layout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.Layout.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    width: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    height: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.opensource.svga.Layout}
 */
proto.com.opensource.svga.Layout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.opensource.svga.Layout;
  return proto.com.opensource.svga.Layout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.opensource.svga.Layout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.opensource.svga.Layout}
 */
proto.com.opensource.svga.Layout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.opensource.svga.Layout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.opensource.svga.Layout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.opensource.svga.Layout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.Layout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.com.opensource.svga.Layout.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.Layout.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.com.opensource.svga.Layout.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.Layout.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float width = 3;
 * @return {number}
 */
proto.com.opensource.svga.Layout.prototype.getWidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.Layout.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float height = 4;
 * @return {number}
 */
proto.com.opensource.svga.Layout.prototype.getHeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.Layout.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.opensource.svga.Transform = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.opensource.svga.Transform, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.opensource.svga.Transform.displayName = 'proto.com.opensource.svga.Transform';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.opensource.svga.Transform.prototype.toObject = function(opt_includeInstance) {
  return proto.com.opensource.svga.Transform.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.opensource.svga.Transform} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.Transform.toObject = function(includeInstance, msg) {
  var f, obj = {
    a: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    b: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    c: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    d: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    tx: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    ty: +jspb.Message.getFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.opensource.svga.Transform}
 */
proto.com.opensource.svga.Transform.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.opensource.svga.Transform;
  return proto.com.opensource.svga.Transform.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.opensource.svga.Transform} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.opensource.svga.Transform}
 */
proto.com.opensource.svga.Transform.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setA(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setB(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setC(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setD(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.opensource.svga.Transform.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.opensource.svga.Transform.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.opensource.svga.Transform} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.Transform.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getA();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getB();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getC();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getD();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getTx();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getTy();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional float a = 1;
 * @return {number}
 */
proto.com.opensource.svga.Transform.prototype.getA = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.Transform.prototype.setA = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float b = 2;
 * @return {number}
 */
proto.com.opensource.svga.Transform.prototype.getB = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.Transform.prototype.setB = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float c = 3;
 * @return {number}
 */
proto.com.opensource.svga.Transform.prototype.getC = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.Transform.prototype.setC = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float d = 4;
 * @return {number}
 */
proto.com.opensource.svga.Transform.prototype.getD = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.Transform.prototype.setD = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float tx = 5;
 * @return {number}
 */
proto.com.opensource.svga.Transform.prototype.getTx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.Transform.prototype.setTx = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float ty = 6;
 * @return {number}
 */
proto.com.opensource.svga.Transform.prototype.getTy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.Transform.prototype.setTy = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.opensource.svga.ShapeEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.com.opensource.svga.ShapeEntity.oneofGroups_);
};
goog.inherits(proto.com.opensource.svga.ShapeEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.opensource.svga.ShapeEntity.displayName = 'proto.com.opensource.svga.ShapeEntity';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.com.opensource.svga.ShapeEntity.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.com.opensource.svga.ShapeEntity.ArgsCase = {
  ARGS_NOT_SET: 0,
  SHAPE: 2,
  RECT: 3,
  ELLIPSE: 4
};

/**
 * @return {proto.com.opensource.svga.ShapeEntity.ArgsCase}
 */
proto.com.opensource.svga.ShapeEntity.prototype.getArgsCase = function() {
  return /** @type {proto.com.opensource.svga.ShapeEntity.ArgsCase} */(jspb.Message.computeOneofCase(this, proto.com.opensource.svga.ShapeEntity.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.opensource.svga.ShapeEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.com.opensource.svga.ShapeEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.opensource.svga.ShapeEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.ShapeEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    shape: (f = msg.getShape()) && proto.com.opensource.svga.ShapeEntity.ShapeArgs.toObject(includeInstance, f),
    rect: (f = msg.getRect()) && proto.com.opensource.svga.ShapeEntity.RectArgs.toObject(includeInstance, f),
    ellipse: (f = msg.getEllipse()) && proto.com.opensource.svga.ShapeEntity.EllipseArgs.toObject(includeInstance, f),
    styles: (f = msg.getStyles()) && proto.com.opensource.svga.ShapeEntity.ShapeStyle.toObject(includeInstance, f),
    transform: (f = msg.getTransform()) && proto.com.opensource.svga.Transform.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.opensource.svga.ShapeEntity}
 */
proto.com.opensource.svga.ShapeEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.opensource.svga.ShapeEntity;
  return proto.com.opensource.svga.ShapeEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.opensource.svga.ShapeEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.opensource.svga.ShapeEntity}
 */
proto.com.opensource.svga.ShapeEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.com.opensource.svga.ShapeEntity.ShapeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.com.opensource.svga.ShapeEntity.ShapeArgs;
      reader.readMessage(value,proto.com.opensource.svga.ShapeEntity.ShapeArgs.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    case 3:
      var value = new proto.com.opensource.svga.ShapeEntity.RectArgs;
      reader.readMessage(value,proto.com.opensource.svga.ShapeEntity.RectArgs.deserializeBinaryFromReader);
      msg.setRect(value);
      break;
    case 4:
      var value = new proto.com.opensource.svga.ShapeEntity.EllipseArgs;
      reader.readMessage(value,proto.com.opensource.svga.ShapeEntity.EllipseArgs.deserializeBinaryFromReader);
      msg.setEllipse(value);
      break;
    case 10:
      var value = new proto.com.opensource.svga.ShapeEntity.ShapeStyle;
      reader.readMessage(value,proto.com.opensource.svga.ShapeEntity.ShapeStyle.deserializeBinaryFromReader);
      msg.setStyles(value);
      break;
    case 11:
      var value = new proto.com.opensource.svga.Transform;
      reader.readMessage(value,proto.com.opensource.svga.Transform.deserializeBinaryFromReader);
      msg.setTransform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.opensource.svga.ShapeEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.opensource.svga.ShapeEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.opensource.svga.ShapeEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.ShapeEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getShape();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.opensource.svga.ShapeEntity.ShapeArgs.serializeBinaryToWriter
    );
  }
  f = message.getRect();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.opensource.svga.ShapeEntity.RectArgs.serializeBinaryToWriter
    );
  }
  f = message.getEllipse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.com.opensource.svga.ShapeEntity.EllipseArgs.serializeBinaryToWriter
    );
  }
  f = message.getStyles();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.com.opensource.svga.ShapeEntity.ShapeStyle.serializeBinaryToWriter
    );
  }
  f = message.getTransform();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.com.opensource.svga.Transform.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.com.opensource.svga.ShapeEntity.ShapeType = {
  SHAPE: 0,
  RECT: 1,
  ELLIPSE: 2,
  KEEP: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.opensource.svga.ShapeEntity.ShapeArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.opensource.svga.ShapeEntity.ShapeArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.opensource.svga.ShapeEntity.ShapeArgs.displayName = 'proto.com.opensource.svga.ShapeEntity.ShapeArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.opensource.svga.ShapeEntity.ShapeArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.com.opensource.svga.ShapeEntity.ShapeArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.opensource.svga.ShapeEntity.ShapeArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.ShapeEntity.ShapeArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    d: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.opensource.svga.ShapeEntity.ShapeArgs}
 */
proto.com.opensource.svga.ShapeEntity.ShapeArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.opensource.svga.ShapeEntity.ShapeArgs;
  return proto.com.opensource.svga.ShapeEntity.ShapeArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.opensource.svga.ShapeEntity.ShapeArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.opensource.svga.ShapeEntity.ShapeArgs}
 */
proto.com.opensource.svga.ShapeEntity.ShapeArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setD(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.opensource.svga.ShapeEntity.ShapeArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.opensource.svga.ShapeEntity.ShapeArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.opensource.svga.ShapeEntity.ShapeArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.ShapeEntity.ShapeArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getD();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string d = 1;
 * @return {string}
 */
proto.com.opensource.svga.ShapeEntity.ShapeArgs.prototype.getD = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.opensource.svga.ShapeEntity.ShapeArgs.prototype.setD = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.opensource.svga.ShapeEntity.RectArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.opensource.svga.ShapeEntity.RectArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.opensource.svga.ShapeEntity.RectArgs.displayName = 'proto.com.opensource.svga.ShapeEntity.RectArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.opensource.svga.ShapeEntity.RectArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.com.opensource.svga.ShapeEntity.RectArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.opensource.svga.ShapeEntity.RectArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.ShapeEntity.RectArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    width: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    height: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    cornerradius: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.opensource.svga.ShapeEntity.RectArgs}
 */
proto.com.opensource.svga.ShapeEntity.RectArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.opensource.svga.ShapeEntity.RectArgs;
  return proto.com.opensource.svga.ShapeEntity.RectArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.opensource.svga.ShapeEntity.RectArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.opensource.svga.ShapeEntity.RectArgs}
 */
proto.com.opensource.svga.ShapeEntity.RectArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCornerradius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.opensource.svga.ShapeEntity.RectArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.opensource.svga.ShapeEntity.RectArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.opensource.svga.ShapeEntity.RectArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.ShapeEntity.RectArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getCornerradius();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.RectArgs.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.RectArgs.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.RectArgs.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.RectArgs.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float width = 3;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.RectArgs.prototype.getWidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.RectArgs.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float height = 4;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.RectArgs.prototype.getHeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.RectArgs.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float cornerRadius = 5;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.RectArgs.prototype.getCornerradius = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.RectArgs.prototype.setCornerradius = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.opensource.svga.ShapeEntity.EllipseArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.opensource.svga.ShapeEntity.EllipseArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.opensource.svga.ShapeEntity.EllipseArgs.displayName = 'proto.com.opensource.svga.ShapeEntity.EllipseArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.com.opensource.svga.ShapeEntity.EllipseArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.opensource.svga.ShapeEntity.EllipseArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    radiusx: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    radiusy: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.opensource.svga.ShapeEntity.EllipseArgs}
 */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.opensource.svga.ShapeEntity.EllipseArgs;
  return proto.com.opensource.svga.ShapeEntity.EllipseArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.opensource.svga.ShapeEntity.EllipseArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.opensource.svga.ShapeEntity.EllipseArgs}
 */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadiusx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadiusy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.opensource.svga.ShapeEntity.EllipseArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.opensource.svga.ShapeEntity.EllipseArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRadiusx();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getRadiusy();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float radiusX = 3;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.prototype.getRadiusx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.prototype.setRadiusx = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float radiusY = 4;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.prototype.getRadiusy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.EllipseArgs.prototype.setRadiusy = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.opensource.svga.ShapeEntity.ShapeStyle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.opensource.svga.ShapeEntity.ShapeStyle.displayName = 'proto.com.opensource.svga.ShapeEntity.ShapeStyle';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.toObject = function(opt_includeInstance) {
  return proto.com.opensource.svga.ShapeEntity.ShapeStyle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.opensource.svga.ShapeEntity.ShapeStyle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.toObject = function(includeInstance, msg) {
  var f, obj = {
    fill: (f = msg.getFill()) && proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.toObject(includeInstance, f),
    stroke: (f = msg.getStroke()) && proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.toObject(includeInstance, f),
    strokewidth: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    linecap: jspb.Message.getFieldWithDefault(msg, 4, 0),
    linejoin: jspb.Message.getFieldWithDefault(msg, 5, 0),
    miterlimit: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    linedashi: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    linedashii: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    linedashiii: +jspb.Message.getFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.opensource.svga.ShapeEntity.ShapeStyle}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.opensource.svga.ShapeEntity.ShapeStyle;
  return proto.com.opensource.svga.ShapeEntity.ShapeStyle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.opensource.svga.ShapeEntity.ShapeStyle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.opensource.svga.ShapeEntity.ShapeStyle}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor;
      reader.readMessage(value,proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.deserializeBinaryFromReader);
      msg.setFill(value);
      break;
    case 2:
      var value = new proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor;
      reader.readMessage(value,proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.deserializeBinaryFromReader);
      msg.setStroke(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStrokewidth(value);
      break;
    case 4:
      var value = /** @type {!proto.com.opensource.svga.ShapeEntity.ShapeStyle.LineCap} */ (reader.readEnum());
      msg.setLinecap(value);
      break;
    case 5:
      var value = /** @type {!proto.com.opensource.svga.ShapeEntity.ShapeStyle.LineJoin} */ (reader.readEnum());
      msg.setLinejoin(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMiterlimit(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLinedashi(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLinedashii(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLinedashiii(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.opensource.svga.ShapeEntity.ShapeStyle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.opensource.svga.ShapeEntity.ShapeStyle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFill();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.serializeBinaryToWriter
    );
  }
  f = message.getStroke();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.serializeBinaryToWriter
    );
  }
  f = message.getStrokewidth();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getLinecap();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getLinejoin();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getMiterlimit();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getLinedashi();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getLinedashii();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getLinedashiii();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.LineCap = {
  LINECAP_BUTT: 0,
  LINECAP_ROUND: 1,
  LINECAP_SQUARE: 2
};

/**
 * @enum {number}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.LineJoin = {
  LINEJOIN_MITER: 0,
  LINEJOIN_ROUND: 1,
  LINEJOIN_BEVEL: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.displayName = 'proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.prototype.toObject = function(opt_includeInstance) {
  return proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.toObject = function(includeInstance, msg) {
  var f, obj = {
    r: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    g: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    b: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    a: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor;
  return proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setR(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setG(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setB(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setA(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getG();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getB();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getA();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float r = 1;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.prototype.getR = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.prototype.setR = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float g = 2;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.prototype.getG = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.prototype.setG = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float b = 3;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.prototype.getB = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.prototype.setB = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float a = 4;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.prototype.getA = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor.prototype.setA = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional RGBAColor fill = 1;
 * @return {?proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.getFill = function() {
  return /** @type{?proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor} */ (
    jspb.Message.getWrapperField(this, proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor, 1));
};


/** @param {?proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor|undefined} value */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.setFill = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.clearFill = function() {
  this.setFill(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.hasFill = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RGBAColor stroke = 2;
 * @return {?proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.getStroke = function() {
  return /** @type{?proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor} */ (
    jspb.Message.getWrapperField(this, proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor, 2));
};


/** @param {?proto.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor|undefined} value */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.setStroke = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.clearStroke = function() {
  this.setStroke(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.hasStroke = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float strokeWidth = 3;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.getStrokewidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.setStrokewidth = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional LineCap lineCap = 4;
 * @return {!proto.com.opensource.svga.ShapeEntity.ShapeStyle.LineCap}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.getLinecap = function() {
  return /** @type {!proto.com.opensource.svga.ShapeEntity.ShapeStyle.LineCap} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.com.opensource.svga.ShapeEntity.ShapeStyle.LineCap} value */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.setLinecap = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional LineJoin lineJoin = 5;
 * @return {!proto.com.opensource.svga.ShapeEntity.ShapeStyle.LineJoin}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.getLinejoin = function() {
  return /** @type {!proto.com.opensource.svga.ShapeEntity.ShapeStyle.LineJoin} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.com.opensource.svga.ShapeEntity.ShapeStyle.LineJoin} value */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.setLinejoin = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float miterLimit = 6;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.getMiterlimit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.setMiterlimit = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional float lineDashI = 7;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.getLinedashi = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.setLinedashi = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional float lineDashII = 8;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.getLinedashii = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.setLinedashii = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional float lineDashIII = 9;
 * @return {number}
 */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.getLinedashiii = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.ShapeEntity.ShapeStyle.prototype.setLinedashiii = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional ShapeType type = 1;
 * @return {!proto.com.opensource.svga.ShapeEntity.ShapeType}
 */
proto.com.opensource.svga.ShapeEntity.prototype.getType = function() {
  return /** @type {!proto.com.opensource.svga.ShapeEntity.ShapeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.com.opensource.svga.ShapeEntity.ShapeType} value */
proto.com.opensource.svga.ShapeEntity.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ShapeArgs shape = 2;
 * @return {?proto.com.opensource.svga.ShapeEntity.ShapeArgs}
 */
proto.com.opensource.svga.ShapeEntity.prototype.getShape = function() {
  return /** @type{?proto.com.opensource.svga.ShapeEntity.ShapeArgs} */ (
    jspb.Message.getWrapperField(this, proto.com.opensource.svga.ShapeEntity.ShapeArgs, 2));
};


/** @param {?proto.com.opensource.svga.ShapeEntity.ShapeArgs|undefined} value */
proto.com.opensource.svga.ShapeEntity.prototype.setShape = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.com.opensource.svga.ShapeEntity.oneofGroups_[0], value);
};


proto.com.opensource.svga.ShapeEntity.prototype.clearShape = function() {
  this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.opensource.svga.ShapeEntity.prototype.hasShape = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RectArgs rect = 3;
 * @return {?proto.com.opensource.svga.ShapeEntity.RectArgs}
 */
proto.com.opensource.svga.ShapeEntity.prototype.getRect = function() {
  return /** @type{?proto.com.opensource.svga.ShapeEntity.RectArgs} */ (
    jspb.Message.getWrapperField(this, proto.com.opensource.svga.ShapeEntity.RectArgs, 3));
};


/** @param {?proto.com.opensource.svga.ShapeEntity.RectArgs|undefined} value */
proto.com.opensource.svga.ShapeEntity.prototype.setRect = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.com.opensource.svga.ShapeEntity.oneofGroups_[0], value);
};


proto.com.opensource.svga.ShapeEntity.prototype.clearRect = function() {
  this.setRect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.opensource.svga.ShapeEntity.prototype.hasRect = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EllipseArgs ellipse = 4;
 * @return {?proto.com.opensource.svga.ShapeEntity.EllipseArgs}
 */
proto.com.opensource.svga.ShapeEntity.prototype.getEllipse = function() {
  return /** @type{?proto.com.opensource.svga.ShapeEntity.EllipseArgs} */ (
    jspb.Message.getWrapperField(this, proto.com.opensource.svga.ShapeEntity.EllipseArgs, 4));
};


/** @param {?proto.com.opensource.svga.ShapeEntity.EllipseArgs|undefined} value */
proto.com.opensource.svga.ShapeEntity.prototype.setEllipse = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.com.opensource.svga.ShapeEntity.oneofGroups_[0], value);
};


proto.com.opensource.svga.ShapeEntity.prototype.clearEllipse = function() {
  this.setEllipse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.opensource.svga.ShapeEntity.prototype.hasEllipse = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ShapeStyle styles = 10;
 * @return {?proto.com.opensource.svga.ShapeEntity.ShapeStyle}
 */
proto.com.opensource.svga.ShapeEntity.prototype.getStyles = function() {
  return /** @type{?proto.com.opensource.svga.ShapeEntity.ShapeStyle} */ (
    jspb.Message.getWrapperField(this, proto.com.opensource.svga.ShapeEntity.ShapeStyle, 10));
};


/** @param {?proto.com.opensource.svga.ShapeEntity.ShapeStyle|undefined} value */
proto.com.opensource.svga.ShapeEntity.prototype.setStyles = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.com.opensource.svga.ShapeEntity.prototype.clearStyles = function() {
  this.setStyles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.opensource.svga.ShapeEntity.prototype.hasStyles = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Transform transform = 11;
 * @return {?proto.com.opensource.svga.Transform}
 */
proto.com.opensource.svga.ShapeEntity.prototype.getTransform = function() {
  return /** @type{?proto.com.opensource.svga.Transform} */ (
    jspb.Message.getWrapperField(this, proto.com.opensource.svga.Transform, 11));
};


/** @param {?proto.com.opensource.svga.Transform|undefined} value */
proto.com.opensource.svga.ShapeEntity.prototype.setTransform = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.com.opensource.svga.ShapeEntity.prototype.clearTransform = function() {
  this.setTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.opensource.svga.ShapeEntity.prototype.hasTransform = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.opensource.svga.FrameEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.opensource.svga.FrameEntity.repeatedFields_, null);
};
goog.inherits(proto.com.opensource.svga.FrameEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.opensource.svga.FrameEntity.displayName = 'proto.com.opensource.svga.FrameEntity';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.opensource.svga.FrameEntity.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.opensource.svga.FrameEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.com.opensource.svga.FrameEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.opensource.svga.FrameEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.FrameEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    alpha: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    layout: (f = msg.getLayout()) && proto.com.opensource.svga.Layout.toObject(includeInstance, f),
    transform: (f = msg.getTransform()) && proto.com.opensource.svga.Transform.toObject(includeInstance, f),
    clippath: jspb.Message.getFieldWithDefault(msg, 4, ""),
    shapesList: jspb.Message.toObjectList(msg.getShapesList(),
    proto.com.opensource.svga.ShapeEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.opensource.svga.FrameEntity}
 */
proto.com.opensource.svga.FrameEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.opensource.svga.FrameEntity;
  return proto.com.opensource.svga.FrameEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.opensource.svga.FrameEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.opensource.svga.FrameEntity}
 */
proto.com.opensource.svga.FrameEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAlpha(value);
      break;
    case 2:
      var value = new proto.com.opensource.svga.Layout;
      reader.readMessage(value,proto.com.opensource.svga.Layout.deserializeBinaryFromReader);
      msg.setLayout(value);
      break;
    case 3:
      var value = new proto.com.opensource.svga.Transform;
      reader.readMessage(value,proto.com.opensource.svga.Transform.deserializeBinaryFromReader);
      msg.setTransform(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClippath(value);
      break;
    case 5:
      var value = new proto.com.opensource.svga.ShapeEntity;
      reader.readMessage(value,proto.com.opensource.svga.ShapeEntity.deserializeBinaryFromReader);
      msg.addShapes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.opensource.svga.FrameEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.opensource.svga.FrameEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.opensource.svga.FrameEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.FrameEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlpha();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLayout();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.opensource.svga.Layout.serializeBinaryToWriter
    );
  }
  f = message.getTransform();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.opensource.svga.Transform.serializeBinaryToWriter
    );
  }
  f = message.getClippath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getShapesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.com.opensource.svga.ShapeEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional float alpha = 1;
 * @return {number}
 */
proto.com.opensource.svga.FrameEntity.prototype.getAlpha = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.com.opensource.svga.FrameEntity.prototype.setAlpha = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Layout layout = 2;
 * @return {?proto.com.opensource.svga.Layout}
 */
proto.com.opensource.svga.FrameEntity.prototype.getLayout = function() {
  return /** @type{?proto.com.opensource.svga.Layout} */ (
    jspb.Message.getWrapperField(this, proto.com.opensource.svga.Layout, 2));
};


/** @param {?proto.com.opensource.svga.Layout|undefined} value */
proto.com.opensource.svga.FrameEntity.prototype.setLayout = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.com.opensource.svga.FrameEntity.prototype.clearLayout = function() {
  this.setLayout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.opensource.svga.FrameEntity.prototype.hasLayout = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Transform transform = 3;
 * @return {?proto.com.opensource.svga.Transform}
 */
proto.com.opensource.svga.FrameEntity.prototype.getTransform = function() {
  return /** @type{?proto.com.opensource.svga.Transform} */ (
    jspb.Message.getWrapperField(this, proto.com.opensource.svga.Transform, 3));
};


/** @param {?proto.com.opensource.svga.Transform|undefined} value */
proto.com.opensource.svga.FrameEntity.prototype.setTransform = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.com.opensource.svga.FrameEntity.prototype.clearTransform = function() {
  this.setTransform(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.opensource.svga.FrameEntity.prototype.hasTransform = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string clipPath = 4;
 * @return {string}
 */
proto.com.opensource.svga.FrameEntity.prototype.getClippath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.opensource.svga.FrameEntity.prototype.setClippath = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated ShapeEntity shapes = 5;
 * @return {!Array.<!proto.com.opensource.svga.ShapeEntity>}
 */
proto.com.opensource.svga.FrameEntity.prototype.getShapesList = function() {
  return /** @type{!Array.<!proto.com.opensource.svga.ShapeEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.opensource.svga.ShapeEntity, 5));
};


/** @param {!Array.<!proto.com.opensource.svga.ShapeEntity>} value */
proto.com.opensource.svga.FrameEntity.prototype.setShapesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.com.opensource.svga.ShapeEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.opensource.svga.ShapeEntity}
 */
proto.com.opensource.svga.FrameEntity.prototype.addShapes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.com.opensource.svga.ShapeEntity, opt_index);
};


proto.com.opensource.svga.FrameEntity.prototype.clearShapesList = function() {
  this.setShapesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.opensource.svga.MovieEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.opensource.svga.MovieEntity.repeatedFields_, null);
};
goog.inherits(proto.com.opensource.svga.MovieEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.opensource.svga.MovieEntity.displayName = 'proto.com.opensource.svga.MovieEntity';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.opensource.svga.MovieEntity.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.opensource.svga.MovieEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.com.opensource.svga.MovieEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.opensource.svga.MovieEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.MovieEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    params: (f = msg.getParams()) && proto.com.opensource.svga.MovieParams.toObject(includeInstance, f),
    imagesMap: (f = msg.getImagesMap()) ? f.toObject(includeInstance, undefined) : [],
    spritesList: jspb.Message.toObjectList(msg.getSpritesList(),
    proto.com.opensource.svga.SpriteEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.opensource.svga.MovieEntity}
 */
proto.com.opensource.svga.MovieEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.opensource.svga.MovieEntity;
  return proto.com.opensource.svga.MovieEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.opensource.svga.MovieEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.opensource.svga.MovieEntity}
 */
proto.com.opensource.svga.MovieEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.com.opensource.svga.MovieParams;
      reader.readMessage(value,proto.com.opensource.svga.MovieParams.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    case 3:
      var value = msg.getImagesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 4:
      var value = new proto.com.opensource.svga.SpriteEntity;
      reader.readMessage(value,proto.com.opensource.svga.SpriteEntity.deserializeBinaryFromReader);
      msg.addSprites(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.opensource.svga.MovieEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.opensource.svga.MovieEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.opensource.svga.MovieEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.opensource.svga.MovieEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.opensource.svga.MovieParams.serializeBinaryToWriter
    );
  }
  f = message.getImagesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSpritesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.com.opensource.svga.SpriteEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.com.opensource.svga.MovieEntity.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.opensource.svga.MovieEntity.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional MovieParams params = 2;
 * @return {?proto.com.opensource.svga.MovieParams}
 */
proto.com.opensource.svga.MovieEntity.prototype.getParams = function() {
  return /** @type{?proto.com.opensource.svga.MovieParams} */ (
    jspb.Message.getWrapperField(this, proto.com.opensource.svga.MovieParams, 2));
};


/** @param {?proto.com.opensource.svga.MovieParams|undefined} value */
proto.com.opensource.svga.MovieEntity.prototype.setParams = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.com.opensource.svga.MovieEntity.prototype.clearParams = function() {
  this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.opensource.svga.MovieEntity.prototype.hasParams = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, string> images = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.com.opensource.svga.MovieEntity.prototype.getImagesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.com.opensource.svga.MovieEntity.prototype.clearImagesMap = function() {
  this.getImagesMap().clear();
};


/**
 * repeated SpriteEntity sprites = 4;
 * @return {!Array.<!proto.com.opensource.svga.SpriteEntity>}
 */
proto.com.opensource.svga.MovieEntity.prototype.getSpritesList = function() {
  return /** @type{!Array.<!proto.com.opensource.svga.SpriteEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.opensource.svga.SpriteEntity, 4));
};


/** @param {!Array.<!proto.com.opensource.svga.SpriteEntity>} value */
proto.com.opensource.svga.MovieEntity.prototype.setSpritesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.com.opensource.svga.SpriteEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.opensource.svga.SpriteEntity}
 */
proto.com.opensource.svga.MovieEntity.prototype.addSprites = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.com.opensource.svga.SpriteEntity, opt_index);
};


proto.com.opensource.svga.MovieEntity.prototype.clearSpritesList = function() {
  this.setSpritesList([]);
};


goog.object.extend(exports, proto.com.opensource.svga);
